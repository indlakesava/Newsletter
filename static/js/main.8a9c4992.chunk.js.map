{"version":3,"sources":["components/Navbar.js","components/Body.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","style","fontSize","Component","Body","props","handleChange","e","validateEmail","target","value","setState","isValid","handleClick","preventDefault","emailid","document","getElementById","handleInsert","state","email","RegExp","test","Axios","get","this","then","response","data","alert","catch","err","console","log","id","type","name","onChange","placeholder","color","display","onClick","disabled","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"kOAgBeA,E,4JAXX,WACI,OACI,qBAAKC,UAAU,+CAAf,SACI,qBAAKA,UAAU,UAAf,SACI,uBAAMA,UAAU,6BAA6BC,MAAO,CAACC,SAAS,SAA9D,UAAyE,MAAzE,8B,GALCC,a,iBCoFNC,G,wDAlFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAOVC,aAAe,SAACC,GACT,EAAKC,cAAcD,EAAEE,OAAOC,OAC3B,EAAKC,SAAS,CACVC,SAAS,IAIb,EAAKD,SAAS,CACVC,SAAS,KAhBF,EAqBnBC,YAAc,SAACN,GACXA,EAAEO,iBACF,EAAKH,SAAS,CACVI,QAASC,SAASC,eAAe,WAAWP,QACzC,WACC,EAAKQ,mBAxBb,EAAKC,MAAQ,CACTJ,QAAU,GACVH,SAAS,GAJE,E,iDA+BnB,SAAcQ,GAEV,QADe,IAAIC,OAAO,mSACZC,KAAKF,MAIJ,IAAIC,OAAO,yJACZC,KAAKF,K,0BAOvB,WACIG,IAAMC,IAAI,4CAA4CC,KAAKN,MAAMJ,SAChEW,MAAK,SAAAC,GAC4B,GAA3BA,EAASC,KAAK,GAAd,IAECC,MAAM,yDAINA,MAAM,+BAGXC,OAAM,SAACC,GACNC,QAAQC,IAAIF,Q,oBAIpB,WACI,OACI,sBAAK/B,UAAU,IAAf,UACI,sBAAKA,UAAU,MAAf,UACI,2DADJ,uEAGuC,mDAEvC,2CAEI,uBAAOkC,GAAG,UAAUC,KAAK,QAAQC,KAAK,OAAOC,SAAUZ,KAAKnB,aAAcgC,YAAY,8BAE1F,sBAAMrC,MAAO,CAAEsC,MAAO,MAAOC,QAAQf,KAAKN,MAAMP,QAAU,OAAQ,UAAlE,gDACA,uBACA,wBAAQ6B,QAAShB,KAAKZ,YAAa6B,UAAWjB,KAAKN,MAAMP,QAAzD,mC,GA7EGT,cCQJwC,MATf,WACE,OACE,sBAAK3C,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCIS4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtC,SAASC,eAAe,SAM1B2B,K","file":"static/js/main.8a9c4992.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css'\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-dark\">\r\n                <div className=\"mx-auto\">\r\n                    <span className=\"navbar-brand h1 text-white\" style={{fontSize:'50 px'}}>{'</>'} One Step Closer</span>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react'\r\nimport Axios from 'axios'\r\nimport '../App.css'\r\nimport { concatSeries } from 'async';\r\n\r\nclass Body extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            emailid : \"\",\r\n            isValid: false\r\n        };\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        if(this.validateEmail(e.target.value)){\r\n            this.setState({\r\n                isValid: true\r\n            })\r\n        }\r\n        else{\r\n            this.setState({\r\n                isValid: false\r\n            })\r\n        }\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            emailid: document.getElementById('emailid').value\r\n            }, () => {\r\n                this.handleInsert();\r\n        });   \r\n        \r\n    }\r\n\r\n    validateEmail(email){\r\n        var pattern1 = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\r\n        if (!pattern1.test(email)) {\r\n            return false;\r\n        }\r\n\r\n        var pattern2 = new RegExp(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\r\n        if (!pattern2.test(email)) {\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    handleInsert() {\r\n        Axios.get(\"http://localhost:3001/api/insert?emailid=\"+this.state.emailid)\r\n        .then(response => {\r\n            if(response.data[0][\"res\"] == 0)\r\n            {\r\n                alert('Thanks for your Love!\\nYou have already subscribed!!!');\r\n            }\r\n            else\r\n            {\r\n                alert('Subscription Successful!');\r\n            }\r\n            \r\n        }).catch((err) => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"p\">\r\n                <div className=\"txt\">\r\n                    <i>Preparing for interviews? </i>\r\n                    Subscribe to this newsletter and\r\n                    get daily practice problems to get <b>One Step Closer</b>\r\n                </div>\r\n                <label>\r\n                    Email:\r\n                    <input id=\"emailid\" type=\"email\" name=\"name\" onChange={this.handleChange} placeholder=\"Enter your Email Id...\" />\r\n                </label>\r\n                <span style={{ color: 'red', display:this.state.isValid ? 'none': 'inline'}}>Please enter a valid Email Address</span>\r\n                <br />\r\n                <button onClick={this.handleClick} disabled={!this.state.isValid}>Subscribe Now!</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Body;","import './App.css';\nimport Navbar from './components/Navbar';\nimport Body from './components/Body';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}